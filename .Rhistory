# Normal distribution
library(NHANES)
# Normal distribution
x <- 2
y <- 3
x+y
install.packages("name")
library(MASS)
install.packages("NHANES")
library(NHANES)
n_height <- sum(complete.cases(nhanes_subset$Height))
n_height <- sum(complete.cases(nhanes_subset$Height))
nhanes_subset
#Filter data for adult males
nhanes_subset <- NHANES %>%
filter(Age  >18 & Gender == "male")
print(nhanes_subset)
print(nhanes_subset)
nhanes_subset <- 2
library(devtools)
install_github("adamdarwichkth/CM2018rpackage", force = TRUE)
bp_dat1 <- the_bp_study(k_sample = 10)
library(CM2018rpackage)
bp_dat1 <- the_bp_study(k_sample = 10)
bp_dat1
bp_dat2 <- the_bp_study(k_sample=20)
bp_dat2
bp_dat1
t.test(bp_dat1$BP[bp_dat1$TRT == 0], bp_dat1$BP[bp_dat1$TRT == 1])
t.test(bp_dat2$BP[bp_dat1$TRT == 0], bp_dat2$BP[bp_dat1$TRT == 1])
t.test(bp_dat2$BP[bp_dat2$TRT == 0], bp_dat2$BP[bp_dat2$TRT == 1])
t.test(bp_dat2$BP[bp_dat2$TRT == 0], bp_dat2$BP[bp_dat2$TRT == 1])
t.test(bp_dat1$BP[bp_dat1$TRT == 0], bp_dat1$BP[bp_dat1$TRT == 1])
t.test(bp_dat1$BP[bp_dat1$TRT == 0], bp_dat1$BP[bp_dat1$TRT == 1])
t.test(bp_dat2$BP[bp_dat2$TRT == 0], bp_dat2$BP[bp_dat2$TRT == 1])
bp_dat2 <- the_bp_study(k_sample=20)
t.test(bp_dat2$BP[bp_dat2$TRT == 0], bp_dat2$BP[bp_dat2$TRT == 1])
bp_dat3 <- the_bp_study(k_sample=50)
# Get the p-value and confidence interval
t.test(bp_dat3$BP[bp_dat3$TRT == 0], bp_dat3$BP[bp_dat3$TRT == 1])
bp_dat4 <- the_bp_study(k_sample=100)
# Get the p-value and confidence interval
t.test(bp_dat4$BP[bp_dat4$TRT == 0], bp_dat4$BP[bp_dat4$TRT == 1])
bp_dat4 <- the_bp_study(k_sample=100)
# Get the p-value and confidence interval
t.test(bp_dat4$BP[bp_dat4$TRT == 0], bp_dat4$BP[bp_dat4$TRT == 1])
bp_dat5 <- the_bp_study(k_sample=250)
# Get the p-value and confidence interval
t.test(bp_dat5$BP[bp_dat5$TRT == 0], bp_dat5$BP[bp_dat5$TRT == 1])
bp_dat6 <- the_bp_study(k_sample=500)
# Get the p-value and confidence interval
t.test(bp_dat6$BP[bp_dat6$TRT == 0], bp_dat6$BP[bp_dat6$TRT == 1])
bp_dat7 <- the_bp_study(k_sample=1000)
# Get the p-value and confidence interval
t.test(bp_dat7$BP[bp_dat7$TRT == 0], bp_dat7$BP[bp_dat7$TRT == 1])
bp_dat8 <- the_bp_study(k_sample=3000)
# Get the p-value and confidence interval
t.test(bp_dat8$BP[bp_dat8$TRT == 0], bp_dat8$BP[bp_dat8$TRT == 1])
library(effectsize)
install_package(effectsize)
install_packages(effectsize)
install_packages(effectsize)
install(effectsize)
install.packages("effectsize")
library(effectsize)
cohens_d(BP ~ TRT, data = bp_dat1)
cohens_d(BP ~ TRT, data = bp_dat1)
bp_dat1 <- the_bp_study(k_sample = 10)
# Get the p-value and confidence interval
t.test(bp_dat1$BP[bp_dat1$TRT == 0], bp_dat1$BP[bp_dat1$TRT == 1])
bp_dat1 <- the_bp_study(k_sample = 10)
# Get the p-value and confidence interval
t.test(bp_dat1$BP[bp_dat1$TRT == 0], bp_dat1$BP[bp_dat1$TRT == 1])
cohens_d(BP ~ TRT, data = bp_dat1)
cohens_d(BP ~ TRT, data = bp_dat8)
cohens_d(BP ~ TRT, data = bp_dat1)
t.test(bp_dat8$BP[bp_dat8$TRT == 0], bp_dat8$BP[bp_dat8$TRT == 1])
m1_bp <- lm(BP ~ TRT, data = bp_dat1)
plot(m1_bp)
summary(m1_bp)
plot(m1_bp)
bp_dat2 <- the_bp_study(k_sample=20)
# Get the p-value and confidence interval
t.test(bp_dat2$BP[bp_dat2$TRT == 0], bp_dat2$BP[bp_dat2$TRT == 1])
bp_dat3 <- the_bp_study(k_sample=50)
# Get the p-value and confidence interval
t.test(bp_dat3$BP[bp_dat3$TRT == 0], bp_dat3$BP[bp_dat3$TRT == 1])
bp_dat4 <- the_bp_study(k_sample=100)
# Get the p-value and confidence interval
t.test(bp_dat4$BP[bp_dat4$TRT == 0], bp_dat4$BP[bp_dat4$TRT == 1])
bp_dat5 <- the_bp_study(k_sample=250)
# Get the p-value and confidence interval
t.test(bp_dat5$BP[bp_dat5$TRT == 0], bp_dat5$BP[bp_dat5$TRT == 1])
bp_dat6 <- the_bp_study(k_sample=500)
# Get the p-value and confidence interval
t.test(bp_dat6$BP[bp_dat6$TRT == 0], bp_dat6$BP[bp_dat6$TRT == 1])
bp_dat7 <- the_bp_study(k_sample=1000)
# Get the p-value and confidence interval
t.test(bp_dat7$BP[bp_dat7$TRT == 0], bp_dat7$BP[bp_dat7$TRT == 1])
bp_dat8 <- the_bp_study(k_sample=3000)
# Get the p-value and confidence interval
t.test(bp_dat8$BP[bp_dat8$TRT == 0], bp_dat8$BP[bp_dat8$TRT == 1])
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
plot(m1_bp)
summary(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat1)
plot(m1_bp)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat2)
plot(m1_bp)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat4)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
bp_dat8 <- the_bp_study(k_sample=3000)
# Get the p-value and confidence interval
t.test(bp_dat8$BP[bp_dat8$TRT == 0], bp_dat8$BP[bp_dat8$TRT == 1])
cohens_d(BP ~ TRT, data = bp_dat8)
cohens_d(BP ~ TRT, data = bp_dat1)
cohens_d(BP ~ TRT, data = bp_dat8)
cohens_d(BP ~ TRT, data = bp_dat2)
cohens_d(BP ~ TRT, data = bp_dat3)
cohens_d(BP ~ TRT, data = bp_dat4)
cohens_d(BP ~ TRT, data = bp_dat5)
cohens_d(BP ~ TRT, data = bp_dat6)
cohens_d(BP ~ TRT, data = bp_dat7)
cohens_d(BP ~ TRT, data = bp_dat8)
plot.hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 1])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 1])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 1])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 1])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
hist(bp_dat8$BP[bp_dat8$TRT == 1])
hist(bp_dat8$BP[bp_dat8$TRT == 0])
mean(bp_dat8$BP[bp_dat8$TRT == 0])
mean(bp_dat8$BP[bp_dat8$TRT == 0]) - mean(bp_dat8$BP[bp_dat8$TRT == 1])
m1_bp <- lm(BP ~ TRT, data = bp_dat8)
plot(m1_bp)
summary(m1_bp)
contr <-  data$NFL[data$GROUP == 0]
treat <- data$NFL[data$GROUP == 1]
# Get means
mean_contr <- mean(contr)
mean_treat <- mean(treat)
# Standard deviations
sd_contr <- sd(contr)
sd_treat <- sd(treat)
# We want to detect a difference of 30% reduction in the geometric mean of NfL.
mean_treat <- mean_treat * 0.7
nc_samples <- length(data$NFL)
NFL_contr <- rnorm(nc_samples, mean_contr, sd_contr)
# Calculate Cohen's D effect size
sd_pooled <- sqrt( (sd_treat^2 + sd_contr^2) / 2)
es_d <- (mean_treat - mean_contr) / sd_pooled
# Calculate Cohen's D effect size
sd_pooled <- sqrt( (sd_treat^2 + sd_contr^2) / 2)
# calculate power over sample size
p.t.two <- pwr.t.test(d = es_d, power = 0.80, type = "two.sample",
alternative = "two.sided")
# calculate power over sample size
p.t.two <- pwr.t.test(d = es_d, power = 0.80, type = "two.sample",
alternative = "two.sided")
plot(p.t.two, xlab = "sample size per group")
library(devtools)
install_github("adamdarwichkth/CM2018rpackage")
library(CM2018rpackage)
# run the data retrieval function to load data as dataframe,
# specifying the number of study participants per study arm (=N)
my_dataframe <- ad_trial_data(n_per_arm = 89)
contr2 <- my_dataframe$NFL[my_dataframe$GROUP == 0]
treat_after <- my_dataframe$NFL[my_dataframe$GROUP == 1]
# Visualise data
hist(treat, main = "Before 3 months")
hist(treat_after, main = "After 3 months")
library(tidyverse)
getwd()
setwd("2025/KTH/Studies/Statistics for Medical Engineering")
getwd()
setwd("Seminar 2/cm2018_ht25_seminar_2_b2")
read.csv("data/Data_T2.csv")
df = read.csv("data/Data_T2.csv")
df
df["GE_fasted"]
df_fasted = df["GE_fasted"]
df
df_fasted
df
df_fasted = df[["GE_fasted","Time"]]
df_fasted = df["GE_fasted","Time"]
df_fasted
selected_columns
selected_columns <- df[c("Time","GE_fasted")]
selected_columns
selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
# Initial parameter estimates
start_vals <- list(C0 = max(fasted_col), lambda = 0.5)
start_vals
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = data, start = start_vals)
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = data, start = start_vals)
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
ft
fit
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
start_vals
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "?",
xlim = c(1.5, 4),
ylim = c(10, 25),
main = "Weight vs Milage"
)
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "?",
main = "Scintigraphy on Fasted State"
)
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "?",
main = "Scintigraphy on Fasted State"
)
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "Other",
main = "Scintigraphy on Fasted State"
)
fasted_col = selected_columns["GE_fasted"]
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "Other",
main = "Scintigraphy on Fasted State"
)
# Imports and others
library(tidyverse)
# Imports and others
library(tidyverse)
library(ggplot2)
df = read.csv("data/Data_T2.csv")
selected_columns <- df[c("Time","GE_fasted")]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
# Plot the graph
plot(x = time_col, y = fasted_col,
xlab = "Time",
ylab = "Other",
main = "Scintigraphy on Fasted State"
)
# Plot the graph
ggplot(selected_columns)
# Plot the graph
ggplot(selected_columns)
# Plot the graph
ggplot(selected_columns, aes(x = selected_columns["Time"], y = selected_columns["GE_fasted"])) +
+
stat_smooth(method = "lm",
col = "#C42126", se = FALSE, size = 1)
# Plot the graph
ggplot(selected_columns, aes(x = selected_columns["Time"], y = selected_columns["GE_fasted"])) +
stat_smooth(method = "lm",
col = "#C42126", se = FALSE, size = 1)
# Plot the graph
ggplot(selected_columns, aes(x = Time, y = GE_fasted) +
col = "#C42126", se = FALSE, size = 1)
# Plot the graph
ggplot(selected_columns, aes(x = Time, y = GE_fasted) +
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage", pch = 19, col = "blue")
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage", pch = 19, col = "blue")
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(fasted_col), lambda = 0.5)
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage", pch = 19, col = "blue")
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage")
plot(time_col, fasted_col, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage")
df
# Sample data
x <- df$Time
y <- df$GE_fasted
# Basic scatter plot
plot(x, y, main = "Weight vs Mileage", xlab = "Weight", ylab = "Mileage", pch = 19, col = "blue")
# Basic scatter plot
plot(x, y, main = "Gastric Content Volume", xlab = "Time (minutes)", ylab = "Volume of Gastric Content", pch = 19, col = "blue")
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content", pch = 19, col = "blue")
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(y), lambda = 0.5)
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
fit
# Draw curve
df <- coef(fit)
df = read.csv("data/Data_T2.csv")
# Draw curve
df.est <- coef(fit)
curve(logfit(x,df.est), from=0, to=300, col="red", lwd=2, add=T)
# Draw curve
df.est <- coef(fit)
summary(fit)
# Draw curve
plot(data$x, data$y, main = "Exponential Decay Fit", pch = 16)
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
# Draw curve
plot(x, y, main = "Exponential Decay Fit", pch = 16)
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
fit
newdata
prediction = predict(fit, newdata = data.frame(x = x))
prediction
prediction
data
curve(predict(fit, newdata = df(x = x)), add = TRUE, col = "red")
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
df = read.csv("data/Data_T2.csv")
selected_columns <- df[c("Time","GE_fasted")]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
df
# Sample data
x <- df$Time
y <- df$GE_fasted
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(y), lambda = 0.5)
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
summary(fit)
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
# Sample data
x <- df$Time
y <- df$GE_fasted
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
prediction = predict(fit, newdata = data.frame(x = x))
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
x
y
x
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data(x = x)), add = TRUE, col = "red")
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
prediction = predict(fit, newdata = data.frame(x = 1))
prediction
y
prediction
len(x)
len(x)
count(x)
prediction = predict(fit, newdata = data.frame(x = 1))
x
y
prediction
prediction
prediction = predict(fit, newdata = data.frame(x = x))
prediction
length(x)
length(y)
prediction
# Imports and others
library(tidyverse)
library(ggplot2)
df = read.csv("data/Data_T2.csv")
selected_columns <- df[c("Time","GE_fasted")]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
df
# Sample data
x <- df$Time
y <- df$GE_fasted
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(y), lambda = 0.5)
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
summary(fit)
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
prediction = predict(fit, newdata = data.frame(x = x))
df = read.csv("data/Data_T2.csv")
selected_columns <- df[c("Time","GE_fasted")]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
df
# Sample data
x <- df$Time
y <- df$GE_fasted
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(y), lambda = 0.5)
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
summary(fit)
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
prediction = predict(fit, newdata = data.frame(x = x))
# Get the half life (still not sure how to do it)
prediction
# Install Packages (install once if needed)
# install.packages(c("readr","dplyr","ggplot2","ggtext","drc", "DescTools"))
library(readr);
library(dplyr);
library(ggplot2);
df = read.csv("data/Data_T2.csv")
selected_columns <- df[c("Time","GE_fasted")]
time_col = selected_columns["Time"]
fasted_col = selected_columns["GE_fasted"]
df
# Sample data
x <- df$Time
y <- df$GE_fasted
# Basic scatter plot
plot(x, y, main = "Gastric Content", xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)", pch = 19, col = "blue")
# Fit the exponential decay model
# Initial parameter estimates
start_vals <- list(C0 = max(y), lambda = 0.5)
start_vals
# Fit the model using nls()
fit <- nls(y ~ C0 * exp(-lambda * x), data = selected_columns, start = start_vals)
summary(fit)
# Draw curve
plot(x, y, main = "Exponential Decay Fit for Gastric Content", pch = 16, xlab = "Time (minutes)", ylab = "Volume of Gastric Content (%)")
curve(predict(fit, newdata = data.frame(x = x)), add = TRUE, col = "red")
prediction = predict(fit, newdata = data.frame(x = x))
# Get the half life (still not sure how to do it)
prediction
fit
fit.model
fit["model"]
fit
k <- coef(model)["time"] # Extract the slope for time
k <- coef(fit)["time"] # Extract the slope for time
k
k <- coef(fit)["model"] # Extract the slope for time
k
coef(fit)
k <- coef(fit)["lambda"] # Extract the slope for time
k
install.packages("PKNCA")
library(PKNCA)
